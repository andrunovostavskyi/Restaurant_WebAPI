2025-01-11 01:36:40.279 +02:00 [WRN] The entity type 'Adress' is an optional dependent using table sharing without any required non shared property that could be used to identify whether the entity exists. If all nullable properties contain a null value in database then an object instance won't be created in the query. Add a required property to create instances with null values for other properties or mark the incoming navigation as required to always create an instance.
2025-01-11 01:36:40.968 +02:00 [INF] Executed DbCommand (16ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT EXISTS (
    SELECT 1
    FROM "Restaurants" AS r)
2025-01-11 01:36:41.006 +02:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT EXISTS (
    SELECT 1
    FROM "AspNetUserRoles" AS a)
2025-01-11 01:36:43.658 +02:00 [INF] HTTP GET /swagger/index.html responded 200 in 66.4136 ms
2025-01-11 01:36:43.682 +02:00 [INF] HTTP GET /swagger/index.js responded 200 in 1.8608 ms
2025-01-11 01:36:44.026 +02:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 124.2975 ms
2025-01-11 01:36:58.050 +02:00 [INF] Get all restaurants
2025-01-11 01:36:58.114 +02:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM "Restaurants" AS r
2025-01-11 01:36:58.135 +02:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-01-11 01:36:58.138 +02:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-01-11 01:36:58.247 +02:00 [INF] Executed DbCommand (16ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t."Id", t."Category", t."ContactEmail", t."ContactNumber", t."Description", t."HasDelivery", t."Name", t."OwnerId", t."Adress_City", t."Adress_PostalCode", t."Adress_Street", d."Id", d."Description", d."KiloCalories", d."Name", d."Price", d."RestaurantId"
FROM (
    SELECT r."Id", r."Category", r."ContactEmail", r."ContactNumber", r."Description", r."HasDelivery", r."Name", r."OwnerId", r."Adress_City", r."Adress_PostalCode", r."Adress_Street"
    FROM "Restaurants" AS r
    LIMIT @__p_1 OFFSET @__p_0
) AS t
LEFT JOIN "Dishes" AS d ON t."Id" = d."RestaurantId"
ORDER BY t."Id"
2025-01-11 01:36:58.349 +02:00 [INF] HTTP GET /api/Restaurant responded 200 in 454.0316 ms
2025-01-11 01:37:19.581 +02:00 [INF] HTTP GET /swagger/index.html responded 200 in 0.4009 ms
2025-01-11 01:37:19.612 +02:00 [INF] HTTP GET /swagger/index.js responded 200 in 3.4736 ms
2025-01-11 01:37:19.751 +02:00 [INF] HTTP GET /swagger/v1/swagger.json responded 200 in 18.2673 ms
2025-01-11 01:37:30.292 +02:00 [INF] Get all restaurants
2025-01-11 01:37:30.336 +02:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM "Restaurants" AS r
2025-01-11 01:37:30.340 +02:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t."Id", t."Category", t."ContactEmail", t."ContactNumber", t."Description", t."HasDelivery", t."Name", t."OwnerId", t."Adress_City", t."Adress_PostalCode", t."Adress_Street", d."Id", d."Description", d."KiloCalories", d."Name", d."Price", d."RestaurantId"
FROM (
    SELECT r."Id", r."Category", r."ContactEmail", r."ContactNumber", r."Description", r."HasDelivery", r."Name", r."OwnerId", r."Adress_City", r."Adress_PostalCode", r."Adress_Street"
    FROM "Restaurants" AS r
    LIMIT @__p_1 OFFSET @__p_0
) AS t
LEFT JOIN "Dishes" AS d ON t."Id" = d."RestaurantId"
ORDER BY t."Id"
2025-01-11 01:37:30.348 +02:00 [INF] HTTP GET /api/Restaurant responded 200 in 68.4087 ms
2025-01-11 01:37:34.520 +02:00 [INF] Get all restaurants
2025-01-11 01:37:34.523 +02:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM "Restaurants" AS r
2025-01-11 01:37:34.526 +02:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-01-11 01:37:34.527 +02:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-01-11 01:37:34.541 +02:00 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t."Id", t."Category", t."ContactEmail", t."ContactNumber", t."Description", t."HasDelivery", t."Name", t."OwnerId", t."Adress_City", t."Adress_PostalCode", t."Adress_Street", d."Id", d."Description", d."KiloCalories", d."Name", d."Price", d."RestaurantId"
FROM (
    SELECT r."Id", r."Category", r."ContactEmail", r."ContactNumber", r."Description", r."HasDelivery", r."Name", r."OwnerId", r."Adress_City", r."Adress_PostalCode", r."Adress_Street"
    FROM "Restaurants" AS r
    LIMIT @__p_0 OFFSET @__p_0
) AS t
LEFT JOIN "Dishes" AS d ON t."Id" = d."RestaurantId"
ORDER BY t."Id"
2025-01-11 01:37:34.545 +02:00 [INF] HTTP GET /api/Restaurant responded 200 in 39.4365 ms
